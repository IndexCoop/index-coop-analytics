-- https://dune.com/queries/1300055
with

revenue as (
select
    t.day,
    sum(t.issue_vol * f.issue_fee + t.redeem_vol * f.redeem_fee + t.tvl * f.streaming_fee/365) as revenue,
    sum(t.nsf) as nsf,
    sum(t.tvl) as tvl
from    (
        select
            s.day,
            s.symbol,
            s.issue_units * p.price as issue_vol,
            s.redeem_units * p.price as redeem_vol,
            s.unit_flows * p.price as nsf,
            s.supply * p.price as tvl
            from        dune_user_generated.indexcoop_supply_daily s
            left join   dune_user_generated.indexcoop_prices_daily p on s.day = p.day and s.symbol = p.symbol
        ) t
left join   dune_user_generated.indexcoop_fee_structure f on f.day = t.day and f.symbol = t.symbol
group by    1
),

price as (
select
    day as "Day",
    price as "Price"
from    (
        select
            date_trunc('day', hour) as day,
            median_price as price, -- median price in the hour according to DEX trades; this filters out noise
            row_number() over (partition by date_trunc('day', hour) order by hour desc) as rnb -- choose the last hour of the day where data is available for the price
        from    prices.prices_from_dex_data
        where   contract_address = '\x0954906da0Bf32d5479e25f46056d22f08464cab' -- INDEX Token Address
        and     median_price > 0 -- don't include if the price hasn't been calculate
        ) t
where       t.rnb = 1
),

supply as (
select
    day as "Day",
    circulating_supply as "Circulating Supply",
    total_supply as "Total Supply"
from        dune_user_generated."indexcoop_index_supply"
),

valuation as (
select
    s."Day" as day,
    s."Circulating Supply" * p."Price" as marketcap,
    s."Total Supply" * p."Price" as fdv
from supply s
left join price p on s."Day" = p."Day"
)

select 
    r.day,
    avg(r.revenue) over (rows between 29 preceding and current row) * 365 as revenue_30d_avg,
    v.marketcap,
    v.fdv,
    v.fdv / (avg(r.revenue) over (rows between 29 preceding and current row) * 365 ) as price_to_sales_fdv,
    v.marketcap / (avg(r.revenue) over (rows between 29 preceding and current row) * 365 ) as price_to_sales_mc,
    v.fdv / r.tvl as price_to_tvl_fdv,
    v.marketcap / r.tvl as price_to_tvl_mc
from        revenue r
left join   valuation v on v.day = r.day
where       r.day > date_trunc('day', least('{{End Date:}}', now())) - interval '{{Trailing Days:}} days' -- Start Date (Not Inclusive)
and         r.day <= date_trunc('day', least('{{End Date:}}', now())) -- End Date (Inclusive) - If not specified use today's most recent price
